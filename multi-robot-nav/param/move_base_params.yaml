# move_base控制器中先设置全局代价地图路径规划和局部代价地图路径规划算法
base_global_planner: "global_planner/GlobalPlanner" # 设置全局路径规划器
base_local_planner: "teb_local_planner/TebLocalPlannerROS" # 设置局部路径规划器
# 设置move_base发布控制命令到话题cmd_vel的频率，单位：Hz，为1秒10次
controller_frequency: 10.0
#全局路径规划器的规划频率，如果设置为0，仅在设置目标点位置时执行一次，单位：Hz，这里为1秒1次
planner_frequency: 1.0  
# 路径规划失败后，尝试重新规划1次后才执行恢复行为，如果设置为-1，代表无限重试
max_planning_retries: 1  
# 这里设置为false，意思是当move_base在不活动状态时，仍然保持代价地图的更新
shutdown_costmaps: false
# 比方说当人或者天降的障碍物突然出现在机器人本来决定好的路径上，或者道路过窄，会导致move_base规划失败，这时候会让move_base重新规划一次
# 而设置的重新规划最多为1次，当这次再规划失败时，会启动move_base的恢复行为
recovery_behaviors:  
  - name: 'conservative_reset'  
    type: 'clear_costmap_recovery/ClearCostmapRecovery'
  - name: 'clearing_rotation'  
    type: 'rotate_recovery/RotateRecovery'
#保守清除，用户指定区域之外的障碍物将从机器人地图中清除
conservative_reset:  
  reset_distance: 1.0
  layer_names: [obstacle_layer]  
#保守清除后，如果周围障碍物允许，机器人将进行原地旋转以清理空间

#保守清除失败，积极清除，清除指定区域之外的所有障碍物，然后进行旋转
aggressive_reset:  
  reset_distance: 3.0
  layer_names: [obstacle_layer]
#积极清除也失败后，放弃规划路径

#可能是更进一步的清除，wiki未找到相关资料
super_reset:  
  reset_distance: 5.0  
  #layer_names: [static_layer, obstacle_layer, inflation_layer]
  layer_names: [obstacle_layer]

#另一种恢复行为，需要注意该行为只能与具有动态设置速度限制功能的局部路径规划器适配，例如dwa
move_slow_and_clear:  
  clearing_distance: 0.5  #与小车距离0.5内的障碍物会被清楚
  limited_trans_speed: 0.1  
  limited_rot_speed: 0.4  
  limited_distance: 0.3  


